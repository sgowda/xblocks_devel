%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %      
%   Copyright (C) 2011 Hong Chen                                              %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function hilbert_dsp48e_init_xblock(blk, BitWidth, conv_latency)

%% inports
a = xInport('a');
b = xInport('b');

%% outports
even = xOutport('even');
odd = xOutport('odd');

%% diagram

% block: untitled/hilbert_dsp48e/Convert0
Scale0_out1 = xSignal;
Convert0_out1 = xSignal;
Convert0 = xBlock(struct('source', 'Convert', 'name', 'Convert0'), ...
                         struct('n_bits', BitWidth, ...
                                'bin_pt', BitWidth - 1, ...
                                'latency', conv_latency, ...
                                'pipeline', 'on'), ...
                         {Scale0_out1}, ...
                         {Convert0_out1});

% block: untitled/hilbert_dsp48e/Convert1
Scale1_out1 = xSignal;
Convert1_out1 = xSignal;
Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('n_bits', BitWidth, ...
                                'bin_pt', BitWidth - 1, ...
                                'latency', conv_latency, ...
                                'pipeline', 'on'), ...
                         {Scale1_out1}, ...
                         {Convert1_out1});

% block: untitled/hilbert_dsp48e/Convert2
Scale2_out1 = xSignal;
Convert2_out1 = xSignal;
Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                         struct('n_bits', BitWidth, ...
                                'bin_pt', BitWidth - 1, ...
                                'latency', conv_latency, ...
                                'pipeline', 'on'), ...
                         {Scale2_out1}, ...
                         {Convert2_out1});

% block: untitled/hilbert_dsp48e/Convert3
Scale3_out1 = xSignal;
Convert3_out1 = xSignal;
Convert3 = xBlock(struct('source', 'Convert', 'name', 'Convert3'), ...
                         struct('n_bits', BitWidth, ...
                                'bin_pt', BitWidth - 1, ....
                                'latency', conv_latency, ...
                                'pipeline', 'on'), ...
                         {Scale3_out1}, ...
                         {Convert3_out1});

% block: untitled/hilbert_dsp48e/Scale0
cadd_out1 = xSignal;
Scale0 = xBlock(struct('source', 'Scale', 'name', 'Scale0'), ...
                       struct('scale_factor', -1), ...
                       {cadd_out1}, ...
                       {Scale0_out1});

% block: untitled/hilbert_dsp48e/Scale1
cadd_out2 = xSignal;
Scale1 = xBlock(struct('source', 'Scale', 'name', 'Scale1'), ...
                       struct('scale_factor', -1), ...
                       {cadd_out2}, ...
                       {Scale1_out1});

% block: untitled/hilbert_dsp48e/Scale2
csub_out1 = xSignal;
Scale2 = xBlock(struct('source', 'Scale', 'name', 'Scale2'), ...
                       struct('scale_factor', -1), ...
                       {csub_out1}, ...
                       {Scale2_out1});

% block: untitled/hilbert_dsp48e/Scale3
csub_out2 = xSignal;
Scale3 = xBlock(struct('source', 'Scale', 'name', 'Scale3'), ...
                       struct('scale_factor', -1), ...
                       {csub_out2}, ...
                       {Scale3_out1});

% block: untitled/hilbert_dsp48e/c_to_ri0
c_to_ri0_out1 = xSignal;
c_to_ri0_out2 = xSignal;
c_to_ri0_sub = xBlock(struct('source', str2func('c_to_ri_init_xblock'), 'name', 'c_to_ri0'), ...
                         {[blk, '/c_to_ri0'],BitWidth, BitWidth-1}, ...
                         {a}, ...
                         {c_to_ri0_out1, c_to_ri0_out2});

% block: untitled/hilbert_dsp48e/c_to_ri1
c_to_ri1_out1 = xSignal;
c_to_ri1_out2 = xSignal;
c_to_ri1_sub = xBlock(struct('source', str2func('c_to_ri_init_xblock'), 'name', 'c_to_ri1'), ...
                         {[blk, '/c_to_ri1'],BitWidth, BitWidth-1}, ...
                         {b}, ...
                         {c_to_ri1_out1, c_to_ri1_out2});

% block: untitled/hilbert_dsp48e/cadd
cadd_sub = xBlock(struct('source', str2func('simd_add_dsp48e_init_xblock'), 'name', 'cadd'), ...
                     {[blk, '/cadd'], 'mode', 'Addition', 'n_bits_a', BitWidth, 'bin_pt_a', BitWidth - 1, ...
                     'n_bits_b', BitWidth, 'bin_pt_b', BitWidth - 1, 'full_precision', 1}, ...
                     {c_to_ri0_out1, c_to_ri0_out2, c_to_ri1_out1, c_to_ri1_out2}, ...
                     {cadd_out1, cadd_out2});

% block: untitled/hilbert_dsp48e/csub
csub_sub = xBlock(struct('source', str2func('simd_add_dsp48e_init_xblock'), 'name', 'csub'), ...
                     {[blk, '/csub'], 'mode', 'Subtraction', 'n_bits_a', BitWidth, 'bin_pt_a', BitWidth - 1, ...
                     'n_bits_b', BitWidth, 'bin_pt_b', BitWidth - 1, 'full_precision', 1}, ...
                     {c_to_ri0_out2, c_to_ri1_out1, c_to_ri1_out2, c_to_ri0_out1}, ...
                     {csub_out1, csub_out2});

% block: untitled/hilbert_dsp48e/ri_to_c0
ri_to_c0_sub = xBlock(struct('source', str2func('ri_to_c_init_xblock'), 'name', 'ri_to_c0'), ...
                         {}, ...
                         {Convert0_out1, Convert2_out1}, ...
                         {even});

% block: untitled/hilbert_dsp48e/ri_to_c1
ri_to_c1_sub = xBlock(struct('source', str2func('ri_to_c_init_xblock'), 'name', 'ri_to_c1'), ...
                         {}, ...
                         {Convert1_out1, Convert3_out1}, ...
                         {odd});

if ~isempty(blk) && ~strcmp(blk(1),'/')
    clean_blocks(blk);
end

end

