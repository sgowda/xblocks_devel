%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %      
%   Copyright (C) 2011 Suraj Gowda, Hong Chen                                 %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function mirror_spectrum_init_xblock(blk, varargin)


defaults = { ...
	'FFTSize', 3, ...
	'input_bitwidth', 18, ...
	'bram_latency', 1, ...
	'negate_latency', 3, ...
	'negate_dsp48e', 1, ...
};
FFTSize = get_var('FFTSize', 'defaults', defaults, varargin{:});
input_bitwidth = get_var('input_bitwidth', 'defaults', defaults, varargin{:});
bram_latency = get_var('bram_latency', 'defaults', defaults, varargin{:});
negate_latency = get_var('negate_latency', 'defaults', defaults, varargin{:});
negate_dsp48e = get_var('negate_dsp48e', 'defaults', defaults, varargin{:});

mux_latency = 1;

if negate_dsp48e
	negate_mode = 'dsp48e';
	negate_latency = 3;
else
	negate_mode = 'logic';
end

%% inports
sync = xInport('sync');
din0 = xInport('din0');
reo_in0 = xInport('reo_in0');
din1 = xInport('din1');
reo_in1 = xInport('reo_in1');
din2 = xInport('din2');
reo_in2 = xInport('reo_in2');
din3 = xInport('din3');
reo_in3 = xInport('reo_in3');

%% outports
sync_out = xOutport('sync_out');
dout0 = xOutport('dout0');
dout1 = xOutport('dout1');
dout2 = xOutport('dout2');
dout3 = xOutport('dout3');

input_bin_pt = input_bitwidth - 1;

%% diagram

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Constant3
Constant3_out1 = xSignal;
Constant3 = xBlock(struct('source', 'Constant', 'name', 'Constant3'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', 2^(FFTSize - 1), ...
                                 'n_bits', FFTSize, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {Constant3_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Counter
Delay1_out1 = xSignal;
Counter_out1 = xSignal;
Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('n_bits', FFTSize, ...
                               'rst', 'on', ...
                               'explicit_period', 'off', ...
                               'use_rpm', 'on'), ...
                        {Delay1_out1}, ...
                        {Counter_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay1
Delay1 = xBlock(struct('source', 'Delay', 'name', 'Delay1'), ...
                       struct('latency', bram_latency + negate_latency), ...
                       {sync}, ...
                       {Delay1_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay2
Delay2 = xBlock(struct('source', 'Delay', 'name', 'Delay2'), ...
                       struct('latency', mux_latency), ...
                       {Delay1_out1}, ...
                       {sync_out});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay3
Delay3_out1 = xSignal;
Delay3 = xBlock(struct('source', 'Delay', 'name', 'Delay3'), ...
                       struct('latency', bram_latency + negate_latency), ...
                       {din0}, ...
                       {Delay3_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay4
Delay4_out1 = xSignal;
Delay4 = xBlock(struct('source', 'Delay', 'name', 'Delay4'), ...
                       struct('latency', bram_latency + negate_latency), ...
                       {din1}, ...
                       {Delay4_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay5
Delay5_out1 = xSignal;
Delay5 = xBlock(struct('source', 'Delay', 'name', 'Delay5'), ...
                       struct('latency', bram_latency + negate_latency), ...
                       {din2}, ...
                       {Delay5_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Delay6
Delay6_out1 = xSignal;
Delay6 = xBlock(struct('source', 'Delay', 'name', 'Delay6'), ...
                       struct('latency', bram_latency + negate_latency), ...
                       {din3}, ...
                       {Delay6_out1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Mux
Relational_out1 = xSignal;
complex_conj0_out1 = xSignal;
Mux = xBlock(struct('source', 'Mux', 'name', 'Mux'), ...
                    struct('latency', mux_latency, ...
                           'arith_type', 'Signed  (2''s comp)', ...
                           'n_bits', 8, ...
                           'bin_pt', 2), ...
                    {Relational_out1, Delay3_out1, complex_conj0_out1}, ...
                    {dout0});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Mux1
complex_conj1_out1 = xSignal;
Mux1 = xBlock(struct('source', 'Mux', 'name', 'Mux1'), ...
                     struct('latency', mux_latency, ...
                            'arith_type', 'Signed  (2''s comp)', ...
                            'n_bits', 8, ...
                            'bin_pt', 2), ...
                     {Relational_out1, Delay4_out1, complex_conj1_out1}, ...
                     {dout1});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Mux2
complex_conj2_out1 = xSignal;
Mux2 = xBlock(struct('source', 'Mux', 'name', 'Mux2'), ...
                     struct('latency', mux_latency, ...
                            'arith_type', 'Signed  (2''s comp)', ...
                            'n_bits', 8, ...
                            'bin_pt', 2), ...
                     {Relational_out1, Delay5_out1, complex_conj2_out1}, ...
                     {dout2});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Mux3
complex_conj3_out1 = xSignal;
Mux3 = xBlock(struct('source', 'Mux', 'name', 'Mux3'), ...
                     struct('latency', mux_latency, ...
                            'arith_type', 'Signed  (2''s comp)', ...
                            'n_bits', 8, ...
                            'bin_pt', 2), ...
                     {Relational_out1, Delay6_out1, complex_conj3_out1}, ...
                     {dout3});

% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/Relational
Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           struct('mode', 'a>b'), ...
                           {Counter_out1, Constant3_out1}, ...
                           {Relational_out1});


% block: single_pol/fft_wideband_real1/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum1/complex_conj0
complex_conj_config.source = str2func('complex_conj_init_xblock');
complex_conj_config.name = 'complex_conj0';
complex_conj0 = xBlock( complex_conj_config, {[blk,'/',complex_conj_config.name], ...
    'input_bitwidth', input_bitwidth, 'input_bin_pt', input_bin_pt, ...
    'negate_latency', negate_latency, 'negate_mode', negate_mode}, ...
    {reo_in0}, {complex_conj0_out1});

complex_conj_config.name = 'complex_conj1';
complex_conj1 = xBlock( complex_conj_config, {[blk,'/',complex_conj_config.name], ...
    'input_bitwidth', input_bitwidth, 'input_bin_pt', input_bin_pt, ...
    'negate_latency', negate_latency, 'negate_mode', negate_mode}, ...
    {reo_in1}, {complex_conj1_out1} );

complex_conj_config.name = 'complex_conj2';
complex_conj2 = xBlock( complex_conj_config, {[blk,'/',complex_conj_config.name], ...
    'input_bitwidth', input_bitwidth, 'input_bin_pt', input_bin_pt, ...
    'negate_latency', negate_latency, 'negate_mode', negate_mode}, ...
    {reo_in2}, {complex_conj2_out1});

complex_conj_config.name = 'complex_conj3';
complex_conj3 = xBlock( complex_conj_config, {[blk,'/',complex_conj_config.name], ...
    'input_bitwidth', input_bitwidth, 'input_bin_pt', input_bin_pt, ...
    'negate_latency', negate_latency, 'negate_mode', negate_mode}, ...
    {reo_in3}, {complex_conj3_out1});

if ~isempty(blk) && ~strcmp(blk(1),'/')
    clean_blocks(blk);
end

end

