function kurtosis_moment_calc_init_xblock(blk, varargin)
%% inports
sync = xInport('sync');
inport6 = xInport('Re{E[X]}');
inport3 = xInport('Im{E[X]}');
inport7 = xInport('Re{E[X^2]}');
inport4 = xInport('Im{E[X^2]}');
inport1 = xInport('E[|X|^2]');
inport2 = xInport('E[||X||^4]');
inport8 = xInport('Re{E[|X|^2X]}');
inport5 = xInport('Im{E[|X|^2X]}');

%% outports
sync_out = xOutport('sync_out');
outport2 = xOutport('E[|X-m_x|^4]');
outport1 = xOutport('E[|X-m_x|^2]^2');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/cross_product_del
cross_product_del_out1 = xSignal('cross_product_del_out1');
cross_product_del = xBlock(struct('source', 'Delay', 'name', 'cross_product_del'), ...
    struct('latency', 14), ...
    {inport1}, ...
    {cross_product_del_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products
kurtosis_cross_products_out1 = xSignal('sync_out');
kurtosis_cross_products_out2 = xSignal('4E[|X|^2]|m_x|^2');
kurtosis_cross_products_out3 = xSignal('4|m_x|^4');
kurtosis_cross_products_out4 = xSignal('E[|X|^4]');
kurtosis_cross_products_out5 = xSignal('Re{2E[X^2*conj(m_x^2)]}');
kurtosis_cross_products_out6 = xSignal('Re{4E[X|X|^2*m_x]}');
kurtosis_cross_products_out7 = xSignal('|m_x|^2');
kurtosis_cross_products_out8 = xSignal('|m_x|^4');
subblockname(blk, 'kurtosis_cross_products')
kurtosis_cross_products_sub = xBlock(struct('source', @kurtosis_cross_products, 'name', 'kurtosis_cross_products'), ...
    {subblockname(blk, 'kurtosis_cross_products')}, ...
    {sync, inport6, inport3, inport7, inport4, inport1, inport2, inport8, inport5}, ...
    {kurtosis_cross_products_out1, kurtosis_cross_products_out2, kurtosis_cross_products_out3, kurtosis_cross_products_out4, kurtosis_cross_products_out5, kurtosis_cross_products_out6, kurtosis_cross_products_out7, kurtosis_cross_products_out8});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den
kurtosis_den_sub = xBlock(struct('source', @kurtosis_den, 'name', 'kurtosis_den'), ...
    {}, ...
    {cross_product_del_out1, kurtosis_cross_products_out7}, ...
    {outport1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num
kurtosis_num_sub = xBlock(struct('source', @kurtosis_num, 'name', 'kurtosis_num'), ...
    {}, ...
    {kurtosis_cross_products_out1, kurtosis_cross_products_out2, kurtosis_cross_products_out3, kurtosis_cross_products_out4, kurtosis_cross_products_out5, kurtosis_cross_products_out6, kurtosis_cross_products_out8}, ...
    {sync_out, outport2});

end

function kurtosis_cross_products(blk, varargin)



%% inports
xlsub3_sync = xInport('sync');
m_x_re = xInport('Re{E[X]}');
m_x_im = xInport('Im{E[X]}');
xlsub3_inport7 = xInport('Re{E[X^2]}');
xlsub3_inport4 = xInport('Im{E[X^2]}');
xlsub3_inport1 = xInport('E[|X|^2]');
xlsub3_inport2 = xInport('E[||X||^4]');
xlsub3_inport8 = xInport('Re{E[|X|^2X]}');
xlsub3_inport5 = xInport('Im{E[|X|^2X]}');

%% outports
xlsub3_sync_out = xOutport('sync_out');
xlsub3_outport1 = xOutport('4E[|X|^2]|m_x|^2');
xlsub3_outport2 = xOutport('4|m_x|^4');
xlsub3_outport3 = xOutport('E[|X|^4]');
xlsub3_outport4 = xOutport('Re{2E[X^2*conj(m_x^2)]}');
xlsub3_outport5 = xOutport('Re{4E[X|X|^2*m_x]}');
xlsub3_outport7 = xOutport('|m_x|^2');
xlsub3_outport8 = xOutport('|m_x|^4');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert
xlsub3_square_cplx1_out1 = xSignal('xlsub3_square_cplx1_out1');
xlsub3_Convert_out1 = xSignal('xlsub3_Convert_out1');
xlsub3_Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
    struct('n_bits', 25, ...
    'bin_pt', 22), ...
    {xlsub3_square_cplx1_out1}, ...
    {xlsub3_Convert_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert1
xlsub3_square_cplx1_out2 = xSignal('xlsub3_square_cplx1_out2');
xlsub3_Convert1_out1 = xSignal('xlsub3_Convert1_out1');
xlsub3_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
    struct('n_bits', 25, ...
    'bin_pt', 22), ...
    {xlsub3_square_cplx1_out2}, ...
    {xlsub3_Convert1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert2
xlsub3_Convert5_out1 = xSignal('xlsub3_Convert5_out1');
xlsub3_Convert2_out1 = xSignal('xlsub3_Convert2_out1');
xlsub3_Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
    struct('n_bits', 25, ...
    'bin_pt', 22), ...
    {xlsub3_Convert5_out1}, ...
    {xlsub3_Convert2_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert3
xlsub3_Scale4_out1 = xSignal('xlsub3_Scale4_out1');
xlsub3_Convert3 = xBlock(struct('source', 'Convert', 'name', 'Convert3'), ...
    struct('n_bits', 94, ...
    'bin_pt', 70, ...
    'quantization', 'Round  (unbiased: +/- Inf)', ...
    'overflow', 'Saturate', ...
    'latency', 4), ...
    {xlsub3_Scale4_out1}, ...
    {xlsub3_outport2});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert4
xlsub3_square_real1_out1 = xSignal('xlsub3_square_real1_out1');
xlsub3_Convert4 = xBlock(struct('source', 'Convert', 'name', 'Convert4'), ...
    struct('n_bits', 94, ...
    'bin_pt', 70, ...
    'quantization', 'Round  (unbiased: +/- Inf)', ...
    'overflow', 'Saturate', ...
    'latency', 4), ...
    {xlsub3_square_real1_out1}, ...
    {xlsub3_outport8});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Convert5
% abs_m_x_sq = xSignal('abs_m_x_sq');
m_x = xSignal();
abs_m_x_sq = modulus_sq('abs_mx_sq', m_x, 'bit_width', 25, 'bin_pt', 24);
xlsub3_Convert5 = xBlock(struct('source', 'Convert', 'name', 'Convert5'), ...
    struct('n_bits', 25, ...
    'bin_pt', 22), ...
    {abs_m_x_sq}, ...
    {xlsub3_Convert5_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Mult4
xlsub3_del1_out1 = xSignal('xlsub3_del1_out1');
xlsub3_Mult4_out1 = xSignal('xlsub3_Mult4_out1');
xlsub3_Mult4 = xBlock(struct('source', 'Mult', 'name', 'Mult4'), ...
    struct('latency', 5), ...
    {xlsub3_Convert2_out1, xlsub3_del1_out1}, ...
    {xlsub3_Mult4_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Scale
xlsub3_cmult_conj2_out1 = xSignal('xlsub3_cmult_conj2_out1');
xlsub3_Scale_out1 = xSignal('xlsub3_Scale_out1');
xlsub3_Scale = xBlock(struct('source', 'Scale', 'name', 'Scale'), ...
    struct('scale_factor', 2), ...
    {xlsub3_cmult_conj2_out1}, ...
    {xlsub3_Scale_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Scale1
xlsub3_cmult_conj1_out1 = xSignal('xlsub3_cmult_conj1_out1');
xlsub3_Scale1 = xBlock(struct('source', 'Scale', 'name', 'Scale1'), ...
    struct('scale_factor', 1), ...
    {xlsub3_cmult_conj1_out1}, ...
    {xlsub3_outport4});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Scale3
xlsub3_Scale3_out1 = xSignal('xlsub3_Scale3_out1');
xlsub3_Scale3 = xBlock(struct('source', 'Scale', 'name', 'Scale3'), ...
    struct('scale_factor', 2), ...
    {xlsub3_Mult4_out1}, ...
    {xlsub3_Scale3_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/Scale4
xlsub3_Scale4 = xBlock(struct('source', 'Scale', 'name', 'Scale4'), ...
    struct('scale_factor', 2), ...
    {xlsub3_square_real1_out1}, ...
    {xlsub3_Scale4_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/del1
xlsub3_del1 = xBlock(struct('source', 'Delay', 'name', 'del1'), ...
    struct('latency', 5), ...
    {xlsub3_inport1}, ...
    {xlsub3_del1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/delay_sq1
xlsub3_delay_sq1_out1 = xSignal('xlsub3_delay_sq1_out1');
xlsub3_delay_sq1 = xBlock(struct('source', 'Delay', 'name', 'delay_sq1'), ...
    struct('latency', 6), ...
    {xlsub3_inport7}, ...
    {xlsub3_delay_sq1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/delay_sq2
xlsub3_delay_sq2_out1 = xSignal('xlsub3_delay_sq2_out1');
xlsub3_delay_sq2 = xBlock(struct('source', 'Delay', 'name', 'delay_sq2'), ...
    struct('latency', 6), ...
    {xlsub3_inport4}, ...
    {xlsub3_delay_sq2_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/delay_sq3
xlsub3_delay_sq3 = xBlock(struct('source', 'Delay', 'name', 'delay_sq3'), ...
    struct('latency', 4), ...
    {xlsub3_Scale3_out1}, ...
    {xlsub3_outport1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/delay_sq5
xlsub3_delay_sq5 = xBlock(struct('source', 'Delay', 'name', 'delay_sq5'), ...
    struct('latency', 6), ...
    {xlsub3_Scale_out1}, ...
    {xlsub3_outport5});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/delay_sq6
xlsub3_delay_sq6 = xBlock(struct('source', 'Delay', 'name', 'delay_sq6'), ...
    struct('latency', 14), ...
    {xlsub3_inport2}, ...
    {xlsub3_outport3});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/mult
xlsub3_mult = xBlock(struct('source', 'Delay', 'name', 'mult'), ...
    struct('latency', 14), ...
    {xlsub3_sync}, ...
    {xlsub3_sync_out});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/mult1
xlsub3_mult1 = xBlock(struct('source', 'Delay', 'name', 'mult1'), ...
    struct('latency', 9), ...
    {xlsub3_Convert5_out1}, ...
    {xlsub3_outport7});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/abs_mx_sq
% xlsub3_abs_mx_sq_sub = xBlock(struct('source', @xlsub3_abs_mx_sq, 'name', 'abs_mx_sq'), ...
%     {}, ...
%     {m_x_re, m_x_im}, ...
%     {abs_m_x_sq});

% 
% config.source = @power_behav_init_xblock;
% config.toplevel = subblockname(blk, 'abs_mx_sq');
% xBlock(config, {config.toplevel}, {m_x}, {abs_m_x_sq});



% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1
xlsub3_cmult_conj1_sub = xBlock(struct('source', @xlsub3_cmult_conj1, 'name', 'cmult_conj1'), ...
    {}, ...
    {xlsub3_delay_sq1_out1, xlsub3_delay_sq2_out1, xlsub3_Convert_out1, xlsub3_Convert1_out1}, ...
    {xlsub3_cmult_conj1_out1, []});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2
xlsub3_cmult_conj2_sub = xBlock(struct('source', @xlsub3_cmult_conj2, 'name', 'cmult_conj2'), ...
    {}, ...
    {xlsub3_inport8, xlsub3_inport5, m_x_re, m_x_im}, ...
    {xlsub3_cmult_conj2_out1, []});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1
xlsub3_square_cplx1_sub = xBlock(struct('source', @xlsub3_square_cplx1, 'name', 'square_cplx1'), ...
    {}, ...
    {m_x_re, m_x_im}, ...
    {xlsub3_square_cplx1_out1, xlsub3_square_cplx1_out2});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_real1
xlsub3_square_real1_sub = xBlock(struct('source', @xlsub3_square_real1, 'name', 'square_real1'), ...
    {}, ...
    {xlsub3_Convert5_out1}, ...
    {xlsub3_square_real1_out1});


xBlock(struct('source', @ri_to_c_init_xblock, 'name', 'ri_to_c_mx'), {}, {m_x_re, m_x_im}, {m_x});

% config.source = ;
% config.name = blk;
% abs_x_sq = xSignal();
% xBlock(struct('source', @power_behav_init_xblock, 'name', 'abs_mx_sq'), {[]}, {m_x}, {abs_m_x_sq});



% config.source = @ri_to_c_init_xblock;
% config.toplevel = subblockname(blk, 'c_to_ri_mx');

% xBlock(config, {config.toplevel}, {m_x_re, m_x_im}, {m_x});

end


function xlsub3_abs_mx_sq()



%% inports
xlsub4_mx_re = xInport('mx_re');
xlsub4_mx_im = xInport('mx_im');

%% outports
xlsub4_Out1 = xOutport('Out1');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/abs_mx_sq/imag_square
xlsub4_imag_square_out1 = xSignal('xlsub4_imag_square_out1');
xlsub4_imag_square = xBlock(struct('source', 'Mult', 'name', 'imag_square'), ...
    struct('placement_style', 'Rectangular shape'), ...
    {xlsub4_mx_im, xlsub4_mx_im}, ...
    {xlsub4_imag_square_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/abs_mx_sq/power_adder
xlsub4_real_square_out1 = xSignal('xlsub4_real_square_out1');
xlsub4_power_adder = xBlock(struct('source', 'AddSub', 'name', 'power_adder'), ...
    struct('latency', 2, ...
    'use_behavioral_HDL', 'on', ...
    'use_rpm', 'on'), ...
    {xlsub4_real_square_out1, xlsub4_imag_square_out1}, ...
    {xlsub4_Out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/abs_mx_sq/real_square
xlsub4_real_square = xBlock(struct('source', 'Mult', 'name', 'real_square'), ...
    [], ...
    {xlsub4_mx_re, xlsub4_mx_re}, ...
    {xlsub4_real_square_out1});



end

function xlsub3_cmult_conj1()



%% inports
xlsub4_a_re = xInport('a_re');
xlsub4_a_im = xInport('a_im');
xlsub4_b_re = xInport('b_re');
xlsub4_b_im = xInport('b_im');

%% outports
xlsub4_c_re = xOutport('c_re');
xlsub4_c_im = xOutport('c_im');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/AddSub
xlsub4_mults_out1 = xSignal('xlsub4_mults_out1');
xlsub4_mults_out2 = xSignal('xlsub4_mults_out2');
xlsub4_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
    struct('latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub4_mults_out1, xlsub4_mults_out2}, ...
    {xlsub4_c_re});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/AddSub1
xlsub4_mults_out3 = xSignal('xlsub4_mults_out3');
xlsub4_mults_out4 = xSignal('xlsub4_mults_out4');
xlsub4_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
    struct('mode', 'Subtraction', ...
    'latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub4_mults_out3, xlsub4_mults_out4}, ...
    {xlsub4_c_im});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/mults
xlsub4_mults_sub = xBlock(struct('source', @xlsub4_mults, 'name', 'mults'), ...
    {}, ...
    {xlsub4_a_re, xlsub4_b_re, xlsub4_a_im, xlsub4_b_im, xlsub4_a_im, xlsub4_b_re, xlsub4_a_re, xlsub4_b_im}, ...
    {xlsub4_mults_out1, xlsub4_mults_out2, xlsub4_mults_out3, xlsub4_mults_out4});

end

function xlsub4_mults()



%% inports
xlsub5_a1 = xInport('a1');
xlsub5_b1 = xInport('b1');
xlsub5_a2 = xInport('a2');
xlsub5_b2 = xInport('b2');
xlsub5_a3 = xInport('a3');
xlsub5_b3 = xInport('b3');
xlsub5_a4 = xInport('a4');
xlsub5_b4 = xInport('b4');

%% outports
xlsub5_c1 = xOutport('c1');
xlsub5_c2 = xOutport('c2');
xlsub5_c3 = xOutport('c3');
xlsub5_c4 = xOutport('c4');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/mults/mult_1
xlsub5_mult_1 = xBlock(struct('source', 'Mult', 'name', 'mult_1'), ...
    struct('latency', 6), ...
    {xlsub5_a1, xlsub5_b1}, ...
    {xlsub5_c1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/mults/mult_2
xlsub5_mult_2 = xBlock(struct('source', 'Mult', 'name', 'mult_2'), ...
    struct('latency', 6), ...
    {xlsub5_a2, xlsub5_b2}, ...
    {xlsub5_c2});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/mults/mult_3
xlsub5_mult_3 = xBlock(struct('source', 'Mult', 'name', 'mult_3'), ...
    struct('latency', 6), ...
    {xlsub5_a3, xlsub5_b3}, ...
    {xlsub5_c3});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj1/mults/mult_4
xlsub5_mult_4 = xBlock(struct('source', 'Mult', 'name', 'mult_4'), ...
    struct('latency', 6), ...
    {xlsub5_a4, xlsub5_b4}, ...
    {xlsub5_c4});



end


function xlsub3_cmult_conj2()



%% inports
xlsub4_a_re = xInport('a_re');
xlsub4_a_im = xInport('a_im');
xlsub4_b_re = xInport('b_re');
xlsub4_b_im = xInport('b_im');

%% outports
xlsub4_c_re = xOutport('c_re');
xlsub4_c_im = xOutport('c_im');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/AddSub
xlsub4_mults_out1 = xSignal('xlsub4_mults_out1');
xlsub4_mults_out2 = xSignal('xlsub4_mults_out2');
xlsub4_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
    struct('latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub4_mults_out1, xlsub4_mults_out2}, ...
    {xlsub4_c_re});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/AddSub1
xlsub4_mults_out3 = xSignal('xlsub4_mults_out3');
xlsub4_mults_out4 = xSignal('xlsub4_mults_out4');
xlsub4_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
    struct('mode', 'Subtraction', ...
    'latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub4_mults_out3, xlsub4_mults_out4}, ...
    {xlsub4_c_im});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/mults
xlsub4_mults_sub = xBlock(struct('source', @xlsub4_mults, 'name', 'mults'), ...
    {}, ...
    {xlsub4_a_re, xlsub4_b_re, xlsub4_a_im, xlsub4_b_im, xlsub4_a_im, xlsub4_b_re, xlsub4_a_re, xlsub4_b_im}, ...
    {xlsub4_mults_out1, xlsub4_mults_out2, xlsub4_mults_out3, xlsub4_mults_out4});

end

function xlsub4_mults()



%% inports
xlsub5_a1 = xInport('a1');
xlsub5_b1 = xInport('b1');
xlsub5_a2 = xInport('a2');
xlsub5_b2 = xInport('b2');
xlsub5_a3 = xInport('a3');
xlsub5_b3 = xInport('b3');
xlsub5_a4 = xInport('a4');
xlsub5_b4 = xInport('b4');

%% outports
xlsub5_c1 = xOutport('c1');
xlsub5_c2 = xOutport('c2');
xlsub5_c3 = xOutport('c3');
xlsub5_c4 = xOutport('c4');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/mults/mult_1
xlsub5_mult_1 = xBlock(struct('source', 'Mult', 'name', 'mult_1'), ...
    struct('latency', 6), ...
    {xlsub5_a1, xlsub5_b1}, ...
    {xlsub5_c1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/mults/mult_2
xlsub5_mult_2 = xBlock(struct('source', 'Mult', 'name', 'mult_2'), ...
    struct('latency', 6), ...
    {xlsub5_a2, xlsub5_b2}, ...
    {xlsub5_c2});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/mults/mult_3
xlsub5_mult_3 = xBlock(struct('source', 'Mult', 'name', 'mult_3'), ...
    struct('latency', 6), ...
    {xlsub5_a3, xlsub5_b3}, ...
    {xlsub5_c3});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/cmult_conj2/mults/mult_4
xlsub5_mult_4 = xBlock(struct('source', 'Mult', 'name', 'mult_4'), ...
    struct('latency', 6), ...
    {xlsub5_a4, xlsub5_b4}, ...
    {xlsub5_c4});



end



function xlsub3_square_cplx1()



%% inports
xlsub4_re = xInport('re');
xlsub4_im = xInport('im');

%% outports
xlsub4_outport2 = xOutport('real(c^2)');
xlsub4_outport1 = xOutport('imag(c^2)');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult
xlsub4_cmult_sub = xBlock(struct('source', @xlsub4_cmult, 'name', 'cmult'), ...
    {}, ...
    {xlsub4_re, xlsub4_im, xlsub4_re, xlsub4_im}, ...
    {xlsub4_outport2, xlsub4_outport1});

end

function xlsub4_cmult()



%% inports
xlsub5_a_re = xInport('a_re');
xlsub5_a_im = xInport('a_im');
xlsub5_b_re = xInport('b_re');
xlsub5_b_im = xInport('b_im');

%% outports
xlsub5_c_re = xOutport('c_re');
xlsub5_c_im = xOutport('c_im');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/AddSub
xlsub5_mults_out1 = xSignal('xlsub5_mults_out1');
xlsub5_mults_out2 = xSignal('xlsub5_mults_out2');
xlsub5_AddSub_out1 = xSignal('xlsub5_AddSub_out1');
xlsub5_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
    struct('mode', 'Subtraction', ...
    'latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub5_mults_out1, xlsub5_mults_out2}, ...
    {xlsub5_AddSub_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/AddSub1
xlsub5_mults_out3 = xSignal('xlsub5_mults_out3');
xlsub5_mults_out4 = xSignal('xlsub5_mults_out4');
xlsub5_AddSub1_out1 = xSignal('xlsub5_AddSub1_out1');
xlsub5_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
    struct('latency', 2, ...
    'use_behavioral_HDL', 'on'), ...
    {xlsub5_mults_out3, xlsub5_mults_out4}, ...
    {xlsub5_AddSub1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/convert0
xlsub5_convert0 = xBlock(struct('source', 'Convert', 'name', 'convert0'), ...
    struct('n_bits', 37, ...
    'bin_pt', 34, ...
    'latency', 1, ...
    'pipeline', 'on'), ...
    {xlsub5_AddSub_out1}, ...
    {xlsub5_c_re});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/convert1
xlsub5_convert1 = xBlock(struct('source', 'Convert', 'name', 'convert1'), ...
    struct('n_bits', 37, ...
    'bin_pt', 34, ...
    'latency', 1, ...
    'pipeline', 'on'), ...
    {xlsub5_AddSub1_out1}, ...
    {xlsub5_c_im});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/mults
xlsub5_mults_sub = xBlock(struct('source', @xlsub5_mults, 'name', 'mults'), ...
    {}, ...
    {xlsub5_a_re, xlsub5_b_re, xlsub5_a_im, xlsub5_b_im, xlsub5_a_im, xlsub5_b_re, xlsub5_a_re, xlsub5_b_im}, ...
    {xlsub5_mults_out1, xlsub5_mults_out2, xlsub5_mults_out3, xlsub5_mults_out4});

end

function xlsub5_mults()



%% inports
xlsub6_a1 = xInport('a1');
xlsub6_b1 = xInport('b1');
xlsub6_a2 = xInport('a2');
xlsub6_b2 = xInport('b2');
xlsub6_a3 = xInport('a3');
xlsub6_b3 = xInport('b3');
xlsub6_a4 = xInport('a4');
xlsub6_b4 = xInport('b4');

%% outports
xlsub6_c1 = xOutport('c1');
xlsub6_c2 = xOutport('c2');
xlsub6_c3 = xOutport('c3');
xlsub6_c4 = xOutport('c4');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/mults/mult_1
xlsub6_mult_1 = xBlock(struct('source', 'Mult', 'name', 'mult_1'), ...
    [], ...
    {xlsub6_a1, xlsub6_b1}, ...
    {xlsub6_c1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/mults/mult_2
xlsub6_mult_2 = xBlock(struct('source', 'Mult', 'name', 'mult_2'), ...
    [], ...
    {xlsub6_a2, xlsub6_b2}, ...
    {xlsub6_c2});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/mults/mult_3
xlsub6_mult_3 = xBlock(struct('source', 'Mult', 'name', 'mult_3'), ...
    [], ...
    {xlsub6_a3, xlsub6_b3}, ...
    {xlsub6_c3});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_cplx1/cmult/mults/mult_4
xlsub6_mult_4 = xBlock(struct('source', 'Mult', 'name', 'mult_4'), ...
    [], ...
    {xlsub6_a4, xlsub6_b4}, ...
    {xlsub6_c4});



end




function xlsub3_square_real1()



%% inports
xlsub4_a = xInport('a');

%% outports
xlsub4_outport1 = xOutport('a^2');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_cross_products/square_real1/Mult
xlsub4_Mult = xBlock(struct('source', 'Mult', 'name', 'Mult'), ...
    struct('latency', 8), ...
    {xlsub4_a, xlsub4_a}, ...
    {xlsub4_outport1});



end


function kurtosis_den()
acc_len = 2^14;
%% inports
sum_abs_x_sq = xInport('E[|X|^2]');
abs_m_x_sq = xInport('|m_x|^2');

%% outports
second_central_moment = xOutport('E[|X-m_x|^2]^2');

%% diagram

mean_abs_x_sq = xSignal();
xBlock(struct('source', 'Scale', 'name', 'scale'), ...
    {'scale_factor', -log2(acc_len)}, {sum_abs_x_sq}, {mean_abs_x_sq});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den/AddSub
second_central_moment_unrounded = xSignal('xlsub3_AddSub_out1');
xlsub3_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
    struct('mode', 'Subtraction', ...
    'latency', 4), ...
    {mean_abs_x_sq, abs_m_x_sq}, ...
    {second_central_moment_unrounded});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den/square_real1
xlsub3_square_real1_sub = xBlock(struct('source', @xlsub3_square_real1, 'name', 'square_real1'), ...
    {}, ...
    {second_central_moment_unrounded}, ...
    {second_central_moment});

end

function xlsub3_square_real1()
n_int_bits = 5;

%% inports
xlsub4_a = xInport('a');

%% outports
xlsub4_outport1 = xOutport('a^2');

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den/square_real1/Convert
xlsub4_Convert_out1 = xSignal('xlsub4_Convert_out1');
xlsub4_Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
    struct('n_bits', 35, ...
    'bin_pt', 35 - n_int_bits, ...
    'quantization', 'Round  (unbiased: +/- Inf)', ...
    'overflow', 'Saturate', ...
    'latency', 3), ...
    {xlsub4_a}, ...
    {xlsub4_Convert_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den/square_real1/Convert1
xlsub4_Convert1_out1 = xSignal('xlsub4_Convert1_out1');
xlsub4_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
    struct('n_bits', 25, ...
    'bin_pt', 25 - n_int_bits, ...
    'quantization', 'Round  (unbiased: +/- Inf)', ...
    'overflow', 'Saturate', ...
    'latency', 3), ...
    {xlsub4_a}, ...
    {xlsub4_Convert1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_den/square_real1/Mult
xlsub4_Mult = xBlock(struct('source', 'Mult', 'name', 'Mult'), ...
    struct('latency', 5), ...
    {xlsub4_Convert_out1, xlsub4_Convert1_out1}, ...
    {xlsub4_outport1});



end



function kurtosis_num()
add_latency = 4;
acc_len = 14;


%% inports
xlsub3_sync = xInport('sync');
xlsub3_inport1 = xInport('4E[|X|^2]|m_x|^2');
xlsub3_inport2 = xInport('4|m_x|^4');
xlsub3_inport3 = xInport('E[|X|^4]');
xlsub3_inport4 = xInport('Re{2E[X^2*conj(m_x^2)]}');
xlsub3_inport5 = xInport('Re{4E[X|X|^2*m_x]}');
xlsub3_inport7 = xInport('|m_x|^4');

%% outports
xlsub3_sync_out = xOutport('sync_out');
fourth_central_moment_rounded = xOutport('E[|X-m_x|^4]');
fourth_central_moment = xSignal();

%% diagram

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/AddSub
xlsub3_AddSub_out1 = xSignal('xlsub3_AddSub_out1');
xlsub3_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
    struct('mode', 'Subtraction', ...
    'latency', add_latency, ...
    'precision', 'User Defined', ...
    'arith_type', 'Signed  (2''s comp)', ...
    'n_bits', 90, ...
    'bin_pt', 68), ...
    {xlsub3_inport7, xlsub3_inport2}, ...
    {xlsub3_AddSub_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/AddSub1
xlsub3_AddSub1_out1 = xSignal('xlsub3_AddSub1_out1');
xlsub3_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
    struct('mode', 'Subtraction', ...
    'latency', add_latency, ...
    'precision', 'User Defined', ...
    'arith_type', 'Signed  (2''s comp)', ...
    'n_bits', 90, ...
    'bin_pt', 68, ...
    'use_behavioral_HDL', 'on', ...
    'hw_selection', 'DSP48', ...
    'pipelined', 'on'), ...
    {xlsub3_inport4, xlsub3_inport5}, ...
    {xlsub3_AddSub1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/AddSub2
xlsub3_delay_sq8_out1 = xSignal('xlsub3_delay_sq8_out1');
xlsub3_AddSub2_out1 = xSignal('xlsub3_AddSub2_out1');
xlsub3_AddSub2 = xBlock(struct('source', 'AddSub', 'name', 'AddSub2'), ...
    struct('latency', add_latency, ...
    'precision', 'User Defined', ...
    'arith_type', 'Signed  (2''s comp)', ...
    'n_bits', 90, ...
    'bin_pt', 68), ...
    {xlsub3_AddSub_out1, xlsub3_delay_sq8_out1}, ...
    {xlsub3_AddSub2_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/AddSub3
xlsub3_AddSub4_out1 = xSignal('xlsub3_AddSub4_out1');
xlsub3_AddSub3 = xBlock(struct('source', 'AddSub', 'name', 'AddSub3'), ...
    struct('latency', add_latency, ...
    'precision', 'User Defined', ...
    'arith_type', 'Signed  (2''s comp)', ...
    'n_bits', 90, ...
    'bin_pt', 68), ...
    {xlsub3_AddSub2_out1, xlsub3_AddSub4_out1}, ...
    {fourth_central_moment});


% Rescale output
xBlock(struct('source', 'Scale', 'name', 'rescale_4th_moment'), ...
    {'scale_factor', -acc_len}, {fourth_central_moment}, {fourth_central_moment_rounded});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/AddSub4
xlsub3_delay_sq1_out1 = xSignal('xlsub3_delay_sq1_out1');
xlsub3_AddSub4 = xBlock(struct('source', 'AddSub', 'name', 'AddSub4'), ...
    struct('latency', add_latency, ...
    'precision', 'User Defined', ...
    'arith_type', 'Signed  (2''s comp)', ...
    'n_bits', 90, ...
    'bin_pt', 68), ...
    {xlsub3_delay_sq1_out1, xlsub3_AddSub1_out1}, ...
    {xlsub3_AddSub4_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/delay_sq1
xlsub3_delay_sq1 = xBlock(struct('source', 'Delay', 'name', 'delay_sq1'), ...
    struct('latency', add_latency), ...
    {xlsub3_inport1}, ...
    {xlsub3_delay_sq1_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/delay_sq8
xlsub3_delay_sq8 = xBlock(struct('source', 'Delay', 'name', 'delay_sq8'), ...
    struct('latency', add_latency), ...
    {xlsub3_inport3}, ...
    {xlsub3_delay_sq8_out1});

% block: untitled/kurtosis_moment_calc_init_xblock/kurtosis_num/sync_del
xlsub3_sync_del = xBlock(struct('source', 'Delay', 'name', 'sync_del'), ...
    struct('latency', 3*add_latency), ...
    {xlsub3_sync}, ...
    {xlsub3_sync_out});



end

